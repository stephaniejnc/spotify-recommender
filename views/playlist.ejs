<nav>
  <div class="logo">
    <h3>spotify recommender</h3>
  </div>
  <ul class="nav-links">
    <li><a href="/">about</a></li>
    <li><a href="/userhome" class="active">user home</a></li>
    <li><a href="/insights">insights</a></li>
  </ul>
  <div class="burger">
    <div class="line1"></div>
    <div class="line2"></div>
    <div class="line3"></div>
  </div>
</nav>

<div id="tracks"></div>
<div id="recs"></div>

<script>

  function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }

  function clearQuery() {
    var uri = window.location.toString();
    if (uri.indexOf("?") > 0) {
      var clean_uri = uri.substring(0, uri.indexOf("?"));
      window.history.replaceState({}, document.title, clean_uri);
    }
  }

  var playlist_id = "playlist-id"

  // sends playlist_id to server to fetch playlists
  async function postplaylist() {
    playlist_id = await getParameterByName('playlist');
    clearQuery()

    console.log(`Selected playlist ID: ${playlist_id}`);
    postData('/playlistid', {
      playlist: playlist_id
    })
      .then(res => {
        console.log(res)
      })
  }

  loadTracks()

  // get JSON object of track's audio features to pass into Datastore track entity
  // async function getAudioFeatures(track_id) {
  //     const response = await fetch(`https://api.spotify.com/v1/audio-features/${track_id}`, {
  //       headers: {
  //         'Authorization': ' Bearer ' + access_token,
  //       }
  //     })
  //     const json = await response.json()
  //     // console.log(json)
  //     return json
  // }

  var temp_playlist = [];
  var onPlay = false;

  async function loadTracks() {

    await postplaylist();
    fetch('/playlist-tracks')
      .then(response => {
        if (response.status != 200) {
          console.log(`Error ${response.status}`)
        }
        return response.json()
      })
      .then(playlist => {
        const app = document.getElementById('tracks');
        // two big divs for playlist and tracks
        const playlistInfo = document.createElement('div');
        playlistInfo.setAttribute('id', 'playlist-info');
        const trackInfo = document.createElement('div');
        trackInfo.setAttribute('id', 'track-info');
        app.appendChild(playlistInfo);
        app.appendChild(trackInfo);
        // playlist image
        const playlist_img = document.createElement('img');
        playlist_img.setAttribute('id', 'playlist-cover');
        playlist_img.setAttribute('alt', 'Playlist Cover');
        if (playlist.images.length > 0) {
          playlist_img.setAttribute('src', playlist.images[0].url);
        }
        else {
          // placeholder image
          playlist_img.setAttribute('src', 'http://www.scottishculture.org/themes/scottishculture/images/music_placeholder.png');
        }
        playlistInfo.appendChild(playlist_img);
        // playlist name
        const playlist_name = document.createElement('p');
        playlist_name.setAttribute('id', 'playlist-name');
        playlist_name.textContent = playlist.name;
        playlistInfo.appendChild(playlist_name);
        // container for confirm/back buttons
        const buttons_div = document.createElement('div');
        buttons_div.setAttribute('id', 'buttons');
        playlistInfo.appendChild(buttons_div);
        // confirm button

        const confirm = document.createElement('a');
        confirm.setAttribute('id', 'confirm');
        confirm.setAttribute('class', 'button');
        confirm.textContent = 'Confirm';
        confirm.setAttribute('onclick', 'confirm()');
        confirm.setAttribute('href', `/recommend`);
        buttons.appendChild(confirm);
        // back button
        const back = document.createElement('a');
        back.setAttribute('id', 'back');
        back.setAttribute('class', 'button');
        back.setAttribute('href', '/userhome');
        back.textContent = 'Back';
        buttons.appendChild(back);

        //

        var hr_added = false;
        playlist.tracks.items.forEach(async (item) => {
          var artists = []
          item.track.artists.forEach(artist => {
            artists.push(artist.name)
          })
          var temp_track = {
            artists: artists,
            audio_features: [],
            name: item.track.name,
            track_id: item.track.id,
            playlist_id: playlist_id
          };
          temp_playlist.push(temp_track);
          // division line
          if (hr_added) {
            const hr = document.createElement('hr');
            trackInfo.appendChild(hr);
          } else {
            hr_added = true;
          }

          // create a row container for each track
          const track = document.createElement('div');
          track.setAttribute('class', 'track');
          trackInfo.appendChild(track);
          // container for track title + duration
          const div = document.createElement('div');
          track.appendChild(div);
          // music note icon
          const music_icon = document.createElement('img');
          music_icon.setAttribute('class', 'icon');
          music_icon.setAttribute('src', '/images/note.png');
          music_icon.setAttribute('alt', 'A music note.');
          music_icon.setAttribute('onclick', `play('${item.track.preview_url}')`);

          div.appendChild(music_icon);
          // preview audio
          const preview_audio = document.createElement('audio');
          preview_audio.setAttribute('class', 'audio');
          preview_audio.setAttribute('id', item.track.preview_url);
          preview_audio.setAttribute('src', item.track.preview_url);
          div.appendChild(preview_audio);
          // track name
          const track_name = document.createElement('a');
          track_name.setAttribute('href', item.track.external_urls.spotify);
          track_name.setAttribute('class', 'track-name');
          track_name.textContent = item.track.name;
          div.appendChild(track_name);
          // duration
          const duration = document.createElement('span');
          duration.setAttribute('class', 'duration');
          duration.textContent = millisToMinutesAndSeconds(item.track.duration_ms);
          div.appendChild(duration);
          // artists
          const artist = document.createElement('p');
          artist.setAttribute('class', 'artist');
          artist.textContent = item.track.album.artists[0].name;
          track.appendChild(artist);
        });
      })
      .catch(err => {
        console.log(err)
      })
  }

  // function play(preview_url) {
  //   var audio = document.getElementById(preview_url);
  //   audio.play();
  // }

  function play(preview_url) {
    var audio = document.getElementById(preview_url);
    console.log(audio);
    console.log("ON PLAY:" + onPlay)
    if (onPlay) {
      audio.pause();
    }
    else { audio.play(); };
    onPlay = !onPlay;
  }

  function millisToMinutesAndSeconds(millis) {
    var minutes = Math.floor(millis / 60000);
    var seconds = ((millis % 60000) / 1000).toFixed(0);
    return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
  }

  async function confirm() {
    for (var i = 0; i < temp_playlist.length; ++i) {
      postData('/track', temp_playlist[i])
        .then(res => {
          console.log(res);
          playlist_id = res.playlist_id;
        });
    }
    // await recommend();
  };

  // fetch post request
  async function postData(url = '', data = {}) {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    })
    return response.json()
  }

</script>